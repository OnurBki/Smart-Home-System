import java.time.LocalDateTime;
import java.util.ArrayList;

public class SmartDeviceRunner {

    /**
     This class is responsible for running the commands read from an input file.
     It keeps track of the outputs generated by the commands.
     */

    private static ArrayList<String> outputs = new ArrayList<>();

    /**
     Returns the ArrayList of outputs generated by the commands.
     @return the ArrayList of outputs
     */
    public static ArrayList<String> getOutputs() {
        return outputs;
    }

    /**
     Adds a message to the ArrayList of outputs.
     @param message the message to be added to the ArrayList
     */
    public static void addToOutputs(String message) {
        SmartDeviceRunner.outputs.add(message);
    }

    /**
     Runs the commands read from the input file.
     @param commandLines an instance of ReadInputFile that holds the commands to be run
     */
    public static void commandRunner(ReadInputFile commandLines) {
        int length = commandLines.getCommandList().size();
        for (int i = 0; i < length; i++) {
            String[] splitCommand = commandLines.getCommandList().get(i).split("\t");
            String currentCommand = commandLines.getCommandList().get(i);
            int commandLength = splitCommand.length;

            SmartDeviceRunner.addToOutputs("COMMAND: " + currentCommand);

            if (i == 0 && !splitCommand[0].equals("SetInitialTime")) {
                SmartDeviceRunner.addToOutputs("ERROR: First command must be set initial time!" +
                        " Program is going to terminate!");
                break;
            } else if (i == 0 && splitCommand[0].equals("SetInitialTime") && commandLength != 2) {
                SmartDeviceRunner.addToOutputs("ERROR: First command must be set initial time!" +
                        " Program is going to terminate!");
                break;
            } else if (i == 0 && splitCommand[0].equals("SetInitialTime") && commandLength == 2 &&
            !DateTimeValidator.isValid(splitCommand[1])) {
                SmartDeviceRunner.addToOutputs("ERROR: Format of the initial date is wrong!" +
                        " Program is going to terminate!");
                break;
            } else if (i == 0 && splitCommand[0].equals("SetInitialTime") && commandLength == 2 &&
                    DateTimeValidator.isValid(splitCommand[1])) {

                Time.setInitialTime(splitCommand[1]);
                Time.setTime(splitCommand[1]);
                SmartDeviceRunner.addToOutputs("SUCCESS: Time has been set to " + splitCommand[1] + "!");
            } else if (i > 0) {

                switch (splitCommand[0]) {
                    case "SetTime":
                        if (commandLength != 2) {
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                        } else if (!DateTimeValidator.isValid(splitCommand[1])) {
                            SmartDeviceRunner.addToOutputs("ERROR: Time format is not correct!");
                        } else {
                            Time.setTime(splitCommand[1]);
                        }

                        break;
                    case "SkipMinutes":
                        if (commandLength != 2) {
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                        } else {
                            try {
                                Time.skipMinutes(Integer.parseInt(splitCommand[1]));
                            } catch (NumberFormatException e) {
                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                            }
                        }

                        break;
                    case "Nop":
                        if (commandLength == 1)
                            if (DeviceList.getSmartDeviceList().size() > 0)
                                Time.nop();
                            else
                                SmartDeviceRunner.addToOutputs("ERROR: There is nothing to switch!");
                        else
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                        break;
                    case "Add":
                        if (commandLength < 2)
                            continue;

                        switch (splitCommand[1]) {
                            case "SmartPlug":
                                switch (commandLength) {
                                    case 3:
                                        DeviceList.add(new SmartPlug(splitCommand[2]));

                                        break;
                                    case 4:

                                        if (splitCommand[3].equals("On"))
                                            DeviceList.add(new SmartPlug(splitCommand[2], true));
                                        else if (splitCommand[3].equals("Off"))

                                            DeviceList.add(new SmartPlug(splitCommand[2], false));
                                        else
                                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                                        break;
                                    case 5:
                                        try {
                                            double ampereParse = Double.parseDouble(splitCommand[4]);

                                            if (splitCommand[3].equals("On") && ampereParse > 0) {
                                                DeviceList.add(new SmartPlug(splitCommand[2], true, ampereParse));
                                            } else if (splitCommand[3].equals("Off") && ampereParse > 0) {
                                                DeviceList.add(new SmartPlug(splitCommand[2], false, ampereParse));
                                            } else if ((splitCommand[3].equals("On") || splitCommand[3].equals("Off"))
                                                    && ampereParse <= 0) {
                                                SmartDeviceRunner.addToOutputs("ERROR: Ampere value must" +
                                                        " be a positive number!");
                                            } else {
                                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                            }
                                        } catch (NumberFormatException e) {
                                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                        }

                                        break;
                                    default:
                                        SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                }

                                break;
                            case "SmartCamera":
                                switch (commandLength) {
                                    case 4:
                                        try {
                                            double mbParse = Double.parseDouble(splitCommand[3]);

                                            if (mbParse > 0)
                                                DeviceList.add(new SmartCamera(splitCommand[2], mbParse));
                                            else
                                                SmartDeviceRunner.addToOutputs("ERROR: Megabyte value" +
                                                        " must be a positive number!");
                                        } catch (NumberFormatException e) {
                                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                        }

                                        break;
                                    case 5:
                                        try {
                                            double mbParse = Double.parseDouble(splitCommand[3]);

                                            if (splitCommand[4].equals("On") && mbParse > 0) {
                                                DeviceList.add(new SmartCamera(splitCommand[2], mbParse,true));
                                            } else if (splitCommand[4].equals("Off") && mbParse > 0) {
                                                DeviceList.add(new SmartCamera(splitCommand[2], mbParse,false));
                                            } else if ((splitCommand[4].equals("On") || splitCommand[4].equals("Off"))
                                                    && mbParse <= 0) {
                                                SmartDeviceRunner.addToOutputs("ERROR: Ampere value must" +
                                                        " be a positive number!");
                                            } else {
                                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                            }
                                        } catch (NumberFormatException e) {
                                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                        }

                                        break;
                                    default:
                                        SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                }

                                break;
                            case "SmartLamp":
                                switch (commandLength) {
                                    case 3:
                                        DeviceList.add(new SmartLamp(splitCommand[2]));

                                        break;
                                    case 4:
                                        if (splitCommand[3].equals("On"))
                                            DeviceList.add(new SmartLamp(splitCommand[2], true));
                                        else if (splitCommand[3].equals("Off"))
                                            DeviceList.add(new SmartLamp(splitCommand[2], false));
                                        else
                                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                                        break;
                                    case 6:
                                        try {
                                            int kelvinParse = Integer.parseInt(splitCommand[4]);
                                            int brightParse = Integer.parseInt(splitCommand[5]);

                                            if (splitCommand[3].equals("On") && (2000 <= kelvinParse && kelvinParse <= 6500)
                                            && (0 <= brightParse && brightParse <= 100)) {

                                                DeviceList.add(new SmartLamp(splitCommand[2], true,
                                                        kelvinParse, brightParse));
                                            }
                                            else if (splitCommand[3].equals("Off") && (2000 <= kelvinParse &&
                                                    kelvinParse <= 6500) && (0 <= brightParse && brightParse <= 100)) {

                                                DeviceList.add(new SmartLamp(splitCommand[2], false,
                                                        kelvinParse, brightParse));
                                            } else if ((splitCommand[3].equals("On") || splitCommand[3].equals("Off")) &&
                                                    (2000 > kelvinParse || kelvinParse > 6500) &&
                                                    (0 <= brightParse && brightParse <= 100)) {

                                                SmartDeviceRunner.addToOutputs("ERROR: Kelvin value" +
                                                        " must be in range of 2000K-6500K!");
                                            } else if ((splitCommand[3].equals("On") || splitCommand[3].equals("Off")) &&
                                                    (2000 <= kelvinParse && kelvinParse <= 6500) &&
                                                    (0 > brightParse || brightParse > 100)) {

                                                SmartDeviceRunner.addToOutputs("ERROR: Brightness" +
                                                        " must be in range of 0%-100%!");
                                            } else {
                                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                            }
                                        } catch (NumberFormatException e) {
                                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                        }

                                        break;
                                    default:
                                        SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                }

                                break;
                            case "SmartColorLamp":
                                switch (commandLength) {
                                    case 3:
                                        DeviceList.add(new SmartLampColor(splitCommand[2]));

                                        break;
                                    case 4:
                                        if (splitCommand[3].equals("On"))
                                            DeviceList.add(new SmartLampColor(splitCommand[2], true));
                                        else if (splitCommand[3].equals("Off"))
                                            DeviceList.add(new SmartLampColor(splitCommand[2], false));
                                        else
                                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                                        break;
                                    case 6:
                                        if (!splitCommand[4].startsWith("0x")) {
                                            try {
                                                int kelvinParse = Integer.parseInt(splitCommand[4]);
                                                int brightParse = Integer.parseInt(splitCommand[5]);

                                                if (splitCommand[3].equals("On") && (2000 <= kelvinParse && kelvinParse <= 6500)
                                                        && (0 <= brightParse && brightParse <= 100)) {

                                                    DeviceList.add(new SmartLampColor(splitCommand[2], true,
                                                            kelvinParse, brightParse));
                                                }
                                                else if (splitCommand[3].equals("Off") && (2000 <= kelvinParse &&
                                                        kelvinParse <= 6500) && (0 <= brightParse && brightParse <= 100)) {

                                                    DeviceList.add(new SmartLampColor(splitCommand[2], false,
                                                            kelvinParse, brightParse));
                                                } else if ((splitCommand[3].equals("On") || splitCommand[3].equals("Off")) &&
                                                        (2000 > kelvinParse || kelvinParse > 6500) &&
                                                        (0 <= brightParse && brightParse <= 100)) {

                                                    SmartDeviceRunner.addToOutputs("ERROR: Kelvin value" +
                                                            " must be in range of 2000K-6500K!");
                                                } else if ((splitCommand[3].equals("On") || splitCommand[3].equals("Off")) &&
                                                        (2000 <= kelvinParse && kelvinParse <= 6500) &&
                                                        (0 > brightParse || brightParse > 100)) {

                                                    SmartDeviceRunner.addToOutputs("ERROR: Brightness" +
                                                            " must be in range of 0%-100%!");
                                                } else {
                                                    SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                                }
                                            } catch (NumberFormatException e) {
                                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                            }
                                        } else {
                                            try {
                                                int hexParse = Integer.parseInt(splitCommand[4].substring(2), 16);
                                                int brightParse = Integer.parseInt(splitCommand[5]);

                                                if (splitCommand[3].equals("On") && (0 <= hexParse && hexParse <= 16777215)
                                                        && (0 <= brightParse && brightParse <= 100)) {

                                                    DeviceList.add(new SmartLampColor(splitCommand[2], true,
                                                            splitCommand[4].substring(2), brightParse));
                                                }
                                                else if (splitCommand[3].equals("Off") && (0 <= hexParse &&
                                                        hexParse <= 16777215) && (0 <= brightParse && brightParse <= 100)) {

                                                    DeviceList.add(new SmartLampColor(splitCommand[2], false,
                                                            splitCommand[4].substring(2), brightParse));
                                                } else if ((splitCommand[3].equals("On") || splitCommand[3].equals("Off")) &&
                                                        (0 > hexParse || hexParse > 16777215) &&
                                                        (0 <= brightParse && brightParse <= 100)) {

                                                    SmartDeviceRunner.addToOutputs("ERROR: Color code value" +
                                                            " must be in range of 0x0-0xFFFFFF!");
                                                } else if ((splitCommand[3].equals("On") || splitCommand[3].equals("Off")) &&
                                                        (0 <= hexParse && hexParse <= 16777215) &&
                                                        (0 > brightParse || brightParse > 100)) {

                                                    SmartDeviceRunner.addToOutputs("ERROR: Brightness" +
                                                            " must be in range of 0%-100%!");
                                                } else {
                                                    SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                                }
                                            } catch (NumberFormatException e) {
                                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                            }
                                        }

                                        break;
                                }

                                break;
                            default:
                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                        }

                        break;
                    case "Remove":
                        if (commandLength == 2)
                            DeviceList.remove(splitCommand[1]);
                        else
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                        break;
                    case "SetSwitchTime":
                        if (commandLength == 3) {

                            if (DateTimeValidator.isValid(splitCommand[2]) && findDeviceFromName(splitCommand[1]) != null) {
                                findDeviceFromName(splitCommand[1]).setSwitchTime(splitCommand[2]);
                                DeviceList.sortList();
                            }
                            else if (!DateTimeValidator.isValid(splitCommand[2]))
                                SmartDeviceRunner.addToOutputs("ERROR: Time format is not correct!");
                            else if (DateTimeValidator.isValid(splitCommand[2]) && findDeviceFromName(splitCommand[1]) == null)
                                SmartDeviceRunner.addToOutputs("ERROR: There is not such a device!");

                        } else {
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                        }

                        break;
                    case "Switch":
                        if (commandLength == 3) {

                            if (splitCommand[2].equals("On") && findDeviceFromName(splitCommand[1]) != null) {
                                findDeviceFromName(splitCommand[1]).setOnOff(true);
                                DeviceList.sortList();
                            }
                            else if (splitCommand[2].equals("Off") && findDeviceFromName(splitCommand[1]) != null) {
                                findDeviceFromName(splitCommand[1]).setOnOff(false);
                                DeviceList.sortList();
                            }
                            else if ((splitCommand[2].equals("On") || splitCommand[2].equals("Off")) &&
                            findDeviceFromName(splitCommand[1]) == null)
                                SmartDeviceRunner.addToOutputs("ERROR: There is not such a device!");
                            else
                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                        } else {
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                        }

                        break;
                    case "ChangeName":
                        if (commandLength == 3) {

                            if (splitCommand[1].equals(splitCommand[2]))
                                SmartDeviceRunner.addToOutputs("ERROR: Both of the names are the same, nothing changed!");
                            else if (findDeviceFromName(splitCommand[1]) == null)
                                SmartDeviceRunner.addToOutputs("ERROR: There is not such a device!");
                            else if (findDeviceFromName(splitCommand[2]) != null)
                                SmartDeviceRunner.addToOutputs("ERROR: There is already a smart device with same name!");
                            else
                                findDeviceFromName(splitCommand[1]).setName(splitCommand[2]);

                        } else
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                        break;
                    case "PlugIn":
                        if (commandLength == 3) {

                            try {
                                SmartPlug temp = (SmartPlug) findDeviceFromName(splitCommand[1]);
                                double ampereParse = Double.parseDouble(splitCommand[2]);

                                if (findDeviceFromName(splitCommand[1]) == null)
                                    SmartDeviceRunner.addToOutputs("ERROR: There is not such a device!");
                                else
                                    ((SmartPlug) findDeviceFromName(splitCommand[1])).plugIn(ampereParse);
                            } catch (NumberFormatException e) {
                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                            } catch (ClassCastException e) {
                                SmartDeviceRunner.addToOutputs("ERROR: This device is not a smart plug!");
                            }

                        } else
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                        break;
                    case "PlugOut":
                        try {
                            if (commandLength == 2) {
                                SmartPlug temp = (SmartPlug) findDeviceFromName(splitCommand[1]);

                                if (findDeviceFromName(splitCommand[1]) == null)
                                    SmartDeviceRunner.addToOutputs("ERROR: There is not such a device!");
                                else
                                    ((SmartPlug) findDeviceFromName(splitCommand[1])).plugOut();

                            } else
                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                        } catch (ClassCastException e) {
                            SmartDeviceRunner.addToOutputs("ERROR: This device is not a smart plug!");
                        }

                        break;
                    case "SetKelvin":
                        try {
                            if (commandLength == 3) {

                                try {
                                    SmartLamp temp = (SmartLamp) findDeviceFromName(splitCommand[1]);
                                    int kelvinParse = Integer.parseInt(splitCommand[2]);

                                    if (findDeviceFromName(splitCommand[1]) != null)
                                        try {
                                            if (2000 <= kelvinParse && kelvinParse <= 6500)
                                                ((SmartLamp) findDeviceFromName(splitCommand[1])).setKelvin(kelvinParse);
                                            else
                                                SmartDeviceRunner.addToOutputs("ERROR: Kelvin value must be in range of 2000K-6500K!");
                                        } catch (ClassCastException e) {
                                            if (2000 <= kelvinParse && kelvinParse <= 6500)
                                                ((SmartLampColor) findDeviceFromName(splitCommand[1])).setKelvin(kelvinParse);
                                            else
                                                SmartDeviceRunner.addToOutputs("ERROR: Kelvin value must be in range of 2000K-6500K!");
                                        }
                                    else
                                        SmartDeviceRunner.addToOutputs("ERROR: There is not such a device!");
                                } catch (NumberFormatException e) {
                                    SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                                }

                            } else
                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                        } catch (ClassCastException e) {
                            SmartDeviceRunner.addToOutputs("ERROR: This device is not a smart lamp!");
                        }

                        break;
                    case "SetBrightness":
                        if (commandLength == 3) {

                            try {
                                SmartLamp temp = (SmartLamp) findDeviceFromName(splitCommand[1]);
                                int brightnessParse = Integer.parseInt(splitCommand[2]);

                                if (findDeviceFromName(splitCommand[1]) != null)
                                    try {
                                        if (0 <= brightnessParse && brightnessParse <= 100)
                                            ((SmartLamp) findDeviceFromName(splitCommand[1])).setBrightness(brightnessParse);
                                        else
                                            SmartDeviceRunner.addToOutputs("ERROR: Brightness must be in range of 0%-100%!");
                                    } catch (ClassCastException e) {
                                        if (0 <= brightnessParse && brightnessParse <= 100)
                                            ((SmartLampColor) findDeviceFromName(splitCommand[1])).setBrightness(brightnessParse);
                                        else
                                            SmartDeviceRunner.addToOutputs("ERROR: Brightness must be in range of 0%-100%!");
                                    }
                                else
                                    SmartDeviceRunner.addToOutputs("ERROR: There is not such a device!");
                            } catch (NumberFormatException e) {
                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                            } catch (ClassCastException e) {
                                SmartDeviceRunner.addToOutputs("ERROR: This device is not a smart lamp!");
                            }

                        } else
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                        break;
                    case "SetColorCode":
                        if (commandLength == 3) {

                            try {
                                SmartLampColor temp = (SmartLampColor) findDeviceFromName(splitCommand[1]);
                                int hexParse = Integer.parseInt(splitCommand[2].substring(2), 16);

                                if (findDeviceFromName(splitCommand[1]) != null)
                                    if (0 <= hexParse && hexParse <= 16777215)
                                        ((SmartLampColor) findDeviceFromName(splitCommand[1]))
                                            .setColorCode(splitCommand[2].substring(2));
                                    else
                                        SmartDeviceRunner.addToOutputs("ERROR: Color code value must be in range of 0x0-0xFFFFFF!");
                                else
                                    SmartDeviceRunner.addToOutputs("ERROR: There is not such a device!");
                            } catch (NumberFormatException e) {
                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                            } catch (ClassCastException e) {
                                SmartDeviceRunner.addToOutputs("ERROR: This device is not a smart color lamp!");
                            }

                        } else
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                        break;
                    case "SetWhite":
                        if (commandLength == 4) {

                            try {
                                SmartLamp temp = (SmartLamp) findDeviceFromName(splitCommand[1]);
                                int kelvinParse = Integer.parseInt(splitCommand[2]);
                                int brightnessParse = Integer.parseInt(splitCommand[3]);

                                if (findDeviceFromName(splitCommand[1]) != null)
                                    try {
                                        if ((0 <= brightnessParse && brightnessParse <= 100) &&
                                                (2000 <= kelvinParse && kelvinParse <= 6500)) {
                                            ((SmartLamp) findDeviceFromName(splitCommand[1])).setKelvin(kelvinParse);
                                            ((SmartLamp) findDeviceFromName(splitCommand[1])).setBrightness(brightnessParse);
                                        } else if ((2000 <= kelvinParse && kelvinParse <= 6500) &&
                                                !(0 <= brightnessParse && brightnessParse <= 100)) {
                                            SmartDeviceRunner.addToOutputs("ERROR: Brightness must be in range of 0%-100%!");
                                        } else if (!(2000 <= kelvinParse && kelvinParse <= 6500) &&
                                                (0 <= brightnessParse && brightnessParse <= 100)) {
                                            SmartDeviceRunner.addToOutputs("ERROR: Kelvin value must be in range of 2000K-6500K!");
                                        } else
                                            SmartDeviceRunner.addToOutputs("ERROR: Kelvin value must be in range of 2000K-6500K!");
                                    } catch (ClassCastException e) {
                                        if ((0 <= brightnessParse && brightnessParse <= 100) &&
                                                (2000 <= kelvinParse && kelvinParse <= 6500)) {
                                            ((SmartLampColor) findDeviceFromName(splitCommand[1])).setKelvin(kelvinParse);
                                            ((SmartLampColor) findDeviceFromName(splitCommand[1])).setBrightness(brightnessParse);
                                            ((SmartLampColor) findDeviceFromName(splitCommand[1])).setMode(false);
                                        } else if ((2000 <= kelvinParse && kelvinParse <= 6500) &&
                                                !(0 <= brightnessParse && brightnessParse <= 100)) {
                                            SmartDeviceRunner.addToOutputs("ERROR: Brightness must be in range of 0%-100%!");
                                        } else if (!(2000 <= kelvinParse && kelvinParse <= 6500) &&
                                                (0 <= brightnessParse && brightnessParse <= 100)) {
                                            SmartDeviceRunner.addToOutputs("ERROR: Kelvin value must be in range of 2000K-6500K!");
                                        } else
                                            SmartDeviceRunner.addToOutputs("ERROR: Kelvin value must be in range of 2000K-6500K!");
                                    }
                            } catch (NumberFormatException e) {
                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                            } catch (ClassCastException e) {
                                SmartDeviceRunner.addToOutputs("ERROR: This device is not a smart lamp!");
                            }

                        } else
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                        break;
                    case "SetColor":
                        if (commandLength == 4) {

                            try {
                                SmartLampColor temp = (SmartLampColor) findDeviceFromName(splitCommand[1]);
                                int hexParse = Integer.parseInt(splitCommand[2].substring(2), 16);
                                int brightnessParse = Integer.parseInt(splitCommand[3]);

                                if (findDeviceFromName(splitCommand[1]) != null) {
                                    if ((0 <= hexParse && hexParse <= 16777215) &&
                                            (0 <= brightnessParse && brightnessParse <= 100)) {
                                        ((SmartLampColor) findDeviceFromName(splitCommand[1])).
                                                setColorCode(splitCommand[2].substring(2));
                                        ((SmartLampColor) findDeviceFromName(splitCommand[1])).setBrightness(brightnessParse);
                                        ((SmartLampColor) findDeviceFromName(splitCommand[1])).setMode(true);
                                    } else if ((0 <= hexParse && hexParse <= 16777215) &&
                                            !(0 <= brightnessParse && brightnessParse <= 100)) {
                                        SmartDeviceRunner.addToOutputs("ERROR: Brightness must be in range of 0%-100%!");
                                    } else if (!(0 <= hexParse && hexParse <= 16777215) &&
                                            (0 <= brightnessParse && brightnessParse <= 100)) {
                                        SmartDeviceRunner.addToOutputs("ERROR: Color code value must be in range of 0x0-0xFFFFFF!");
                                    } else
                                        SmartDeviceRunner.addToOutputs("ERROR: Color code value must be in range of 0x0-0xFFFFFF!");
                                }
                                else
                                    SmartDeviceRunner.addToOutputs("ERROR: There is not such a device!");
                            } catch (NumberFormatException e) {
                                SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                            } catch (ClassCastException e) {
                                SmartDeviceRunner.addToOutputs("ERROR: This device is not a smart color lamp!");
                            }

                        } else
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                        break;
                    case "ZReport":
                        if (commandLength == 1) {

                            SmartDeviceRunner.zReport();

                        } else
                            SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");

                        break;
                    default:
                        SmartDeviceRunner.addToOutputs("ERROR: Erroneous command!");
                }

            }

            // An if statement to represent ZReport in case the last command is not ZReport.
            if (i == length - 1 && !currentCommand.equals("ZReport")) {
                SmartDeviceRunner.addToOutputs("ZReport:");
                SmartDeviceRunner.zReport();
            }
        }
    }

    /**
     This method searches for a SmartDevice based on its name.
     If a SmartDevice with the specified name is found, it is returned.
     Otherwise, null is returned.
     @param name the name of the SmartDevice to search for
     @return the SmartDevice object with the specified name, or null if not found
     */
    public static SmartDevice findDeviceFromName(String name) {

        if (DeviceList.getSmartDeviceList().size() > 0)
            for (SmartDevice device : DeviceList.getSmartDeviceList()) {

                if (device.getName().equals(name)) {
                    return device;
                }

            }

        return null;
    }

    /**
     This method generates a zReport that displays the time and status of all SmartDevices.
     If there are no SmartDevices, the time is displayed only.
     */
    public static void zReport() {
        LocalDateTime timeNow = Time.getTime();
        String timeText = timeNow.format(DateTimeValidator.getDateTimeFormatter());

        if (DeviceList.getSmartDeviceList().size() == 0) {
            SmartDeviceRunner.addToOutputs(String.format("Time is:\t%s", timeText));
        } else {
            SmartDeviceRunner.addToOutputs(String.format("Time is:\t%s", timeText));
            for (SmartDevice device : DeviceList.getSmartDeviceList()) {
                switch (device.getType()) {
                    case 0:
                        SmartDeviceRunner.addToOutputs(((SmartPlug) device).toString(device));

                        break;
                    case 1:
                        SmartDeviceRunner.addToOutputs(((SmartCamera) device).toString(device));

                        break;
                    case 2:
                        SmartDeviceRunner.addToOutputs(((SmartLamp) device).toString(device));

                        break;
                    case 3:
                        SmartDeviceRunner.addToOutputs(((SmartLampColor) device).toString(device));

                        break;
                }
            }
        }
    }
}
